#!/usr/bin/env bash

# This script checks if a pre-host-network version of the app is currently installed and, if it is,
# deletes the old configuration files and creates a new one with a default configuration and UI port changed to 8083

create_file_if_not_exists() {
  local filename=$1
  local content=$2
  local file="${HOME_ASSISTANT_CONFIG_DIR}/${filename}"
  
  if [[ ! -f "${file}" ]]; then
    echo "Creating ${filename}"
    echo -e "${content}" > "${file}"
  else
    echo "${filename} already exists"
  fi
}

create_dir_if_not_exists() {
  local dir=$1

  if [[ ! -d "${dir}" ]]; then
    echo "Creating directory ${dir}"
    mkdir -p "${dir}"
  else
    echo "Directory ${dir} already exists"
  fi
}

APP_DIR="$(dirname "${BASH_SOURCE[0]}")/.."
HOME_ASSISTANT_CONFIG_DIR="${APP_DIR}/data"
PRE_HOST_NETWORK_CONFIGURATION_YAML="${APP_DIR}/configuration.yaml"
PRE_HOST_NETWORK_CONFIGURATION_TEMPLATE="${APP_DIR}/configuration.yaml.template"
CONFIGURATION_YAML="${HOME_ASSISTANT_CONFIG_DIR}/configuration.yaml"

# Check for the existence of pre-host-network configuration files and delete them if they exist
if [[ -f "${PRE_HOST_NETWORK_CONFIGURATION_YAML}" ]] || [[ -f "${PRE_HOST_NETWORK_CONFIGURATION_TEMPLATE}" ]]; then
    echo "This is a pre-host-network installation"

    if [[ -f "${PRE_HOST_NETWORK_CONFIGURATION_YAML}" ]]; then
        echo "Deleting old configuration.yaml"
        rm "${PRE_HOST_NETWORK_CONFIGURATION_YAML}"
    fi

    if [[ -f "${PRE_HOST_NETWORK_CONFIGURATION_TEMPLATE}" ]]; then
        echo "Deleting old configuration.yaml.template"
        rm "${PRE_HOST_NETWORK_CONFIGURATION_TEMPLATE}"
    fi

    # Also delete the configuration.yml in the data dir
    if [[ -f "${CONFIGURATION_YAML}" ]]; then
        echo "Deleting old configuration.yaml in data dir"
        rm "${CONFIGURATION_YAML}"
    fi
fi

# Create configuration, automations, scenes, scripts, and secrets files, as well as empty deps directory, if they do not exist

# default configuration + UI port changed to 8083
CONFIG_YAML_CONTENT=$(cat << EOF
# Loads default set of integrations. Do not remove.
default_config:

# Load frontend themes from the themes folder
frontend:
  themes: !include_dir_merge_named themes

# Text-to-speech
tts:
  - platform: google_translate

automation: !include automations.yaml
script: !include scripts.yaml
scene: !include scenes.yaml

http:
  server_port: 8083
EOF
)

SECRETS_YAML_CONTENT=$(cat << EOF
# Use this file to store secrets like usernames and passwords.
# Learn more at https://www.home-assistant.io/docs/configuration/secrets/
some_password: welcome
EOF
)

create_file_if_not_exists "configuration.yaml" "${CONFIG_YAML_CONTENT}"
create_file_if_not_exists "automations.yaml" "[]"
create_file_if_not_exists "scenes.yaml" ""
create_file_if_not_exists "scripts.yaml" ""
create_file_if_not_exists "secrets.yaml" "${SECRETS_YAML_CONTENT}"
create_dir_if_not_exists "${HOME_ASSISTANT_CONFIG_DIR}/deps"